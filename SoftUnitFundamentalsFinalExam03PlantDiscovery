using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;

namespace SoftUnitFundamentalsFinalExam
{
    class Program
    {
        private static string casint;

        static void Main(string[] args)
        {
            //SoftUnitFundamentalsFinalExam03PlantDiscovery

            Dictionary<string, List<double>> plantsList = new Dictionary<string, List<double>>();

            int n = int.Parse(Console.ReadLine());

            for (int i = 0; i < n; i++)
            {
                string[] input = Console.ReadLine().Split("<->", StringSplitOptions.RemoveEmptyEntries).ToArray();
                if (plantsList.ContainsKey(input[0]))
                {
                    plantsList[input[0]][0] = double.Parse(input[1]);
                    continue;
                }
                plantsList.Add(input[0], new List<double> { double.Parse(input[1]), 0.00 });
            }

            while (true)
            {
                string[] command = Console.ReadLine().Split(new char[] { ':', '-', ' ' }, StringSplitOptions.RemoveEmptyEntries).ToArray();

                if (command[0] == "Exhibition")
                {
                    break;
                }

                if (!plantsList.ContainsKey(command[1]))
                {
                    Console.WriteLine("error");
                    continue;
                }

                switch (command[0])
                {
                    case "Rate"://•	Rate: {plant} - {rating} – add the given rating to the plant (store all ratings)
                        if (plantsList[command[1]][1] != 0.00)
                        {
                            plantsList[command[1]][1] = (plantsList[command[1]][1] + double.Parse(command[2])) / 2;
                            continue;
                        }
                        plantsList[command[1]][1] = double.Parse(command[2]);
                        break;

                    case "Update"://•	Update: {plant} - {new_rarity} – update the rarity of the plant with the new one
                        plantsList[command[1]][0] = double.Parse(command[2]);
                        break;

                    case "Reset"://•	Reset: {plant} – remove all the ratings of the given plant
                        List<double> currentRarity = new List<double> { plantsList[command[1]][0], 0.00 };
                        plantsList[command[1]] = currentRarity;
                        break;
                }

            }

            Console.WriteLine("Plants for the exhibition:");
            //sorted by rarity descending, then by average rating descending
            foreach (var item in plantsList.OrderByDescending(x => x.Value[0]).ThenBy(x => x.Value[1]))
            {
                Console.WriteLine($"- {item.Key}; Rarity: {item.Value[0]}; Rating: {item.Value[1]:F2}");
            }

            //
        }

    }
}
